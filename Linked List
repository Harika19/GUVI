//basic operations of linked list
#include <iostream>
using namespace std;
struct node{
	int data;
	node* next;
};
class linked_l{
	private:
		node *head,*tail;
		public:
			linked_l(){
				head=NULL;
				tail=NULL;
			}
		void add_n(int n){
			node *temp=new node;
			temp->data=n;
			temp->next=NULL;
		    if(head==NULL){
		    	head=temp;
		    	tail=temp;
			}
			else{
				tail->next=temp;
				tail=tail->next;
			}
			
		}
		void add_front(int d){
			node *temp1=new node;
			temp1->data=d;
			temp1->next=NULL;
			if(head==NULL){
				head=temp1;
				tail=temp1;
			}
			else{
				temp1->next=head;
				head=temp1;
		}
	}
		//removing node by its position
		void removenode(int p)
		{
			node* tempp=head;
			if(p==1)
			{
				head=tempp->next;
				delete(tempp);
			}
			int i;
			for(i=0;i<p-2;i++)
			{
				tempp=tempp->next;
			}
			node* temp3=tempp->next;
			tempp->next=temp3->next;
			delete(temp3);
		}
		void display()
		{
			node* temp;
			temp=head;
			while(temp!=NULL)
			{
				cout<<temp->data;
				temp=temp->next;
					}	
		}
			
};
int main()
{
	linked_l a;
	a.add_n(1);
	a.add_n(2);
	a.add_n(3);
	a.add_front(4);
	a.removenode(3);
	a.display();
	return 0;
}
